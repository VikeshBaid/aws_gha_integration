AWSTemplateFormatVersion: '2010-09-09'
Description: Template to create lambda and apigateway

Parameters:
  TagName:
    Description: Tag
    Type: String
    Default: lambda and ApiGateway Test Stack CF

  S3LambdaCodeBucket:
    Description: BUcket in which lambda code is present
    Type: String
    Default: "vb-test-lambda-code-bucket"

  S3LambdaCodeKey:
    Description: Object name of the lambda code zip
    Type: String
    Default: 'code/package.zip'

  Component:
    Description: Name of the component
    Type: String
    Default: test-shodan-webhooks

Resources:

  LambdaDLQ:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600
      QueueName: ShodanWebhookLambda_error_queue
      Tags:
        - Key: component
          Value: !Ref Component
        - Key: Name
          Value: webhook-error-queue
  
  LambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn:
      - LambdaDLQ
    Properties: 
      Architectures: 
        - x86_64
      Code: 
        S3Bucket: !Ref S3LambdaCodeBucket
        S3Key: !Ref S3LambdaCodeKey
      DeadLetterConfig:
        TargetArn: !GetAtt LambdaDLQ.Arn
      Description: Lambda code
      FunctionName: test-function-shodan
      Handler: lambda_function.lambda_handler
      MemorySize: 512
      PackageType: Zip
      Role: "arn:aws:iam::792514764471:role/lambdaservicerole-1"
      Runtime: python3.9
      Tags: 
        - Key: Name
          Value: webhook-lambda
        - Key: component
          Value: !Ref Component
      Timeout: 300

  # RESTApiGateway:
  #   Type: AWS::ApiGateway::RestApi
  #   Properties: 
  #     Description: rest api to test waf
  #     Name: TestRestApiGateway
  #     EndpointConfiguration:
  #       Types:
  #         - REGIONAL
  #     Tags: 
  #       - Key: Name
  #         Value: !Ref TagName

  # RESTApiMethod:
  #   Type: AWS::ApiGateway::Method
  #   Properties: 
  #     ApiKeyRequired: false
  #     HttpMethod: POST
  #     Integration: 
  #       IntegrationHttpMethod: POST
  #       Type: AWS_PROXY
  #       Uri: !Join
  #       - ''
  #       - - 'arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/'
  #         - !GetAtt LambdaFunction.Arn
  #         - /invocations
  #     MethodResponses:
  #           -
  #             ResponseParameters:
  #                 method.response.header.Content-Length: true
  #                 method.response.header.Content-Type: true
  #                 method.response.header.Connection: true
  #             StatusCode: "200"
  #     ResourceId:  !GetAtt RESTApiGateway.RootResourceId
  #     RestApiId: !Ref RESTApiGateway

  # ApiGatewayDeployment:
  #   Type: AWS::ApiGateway::Deployment
  #   DependsOn:
  #     - RESTApiMethod
  #   Properties:
  #     RestApiId: !Ref RESTApiGateway
  #     StageName: webhook

  # RestApiGatewayStage:
  #   Type: AWS::ApiGateway::Stage
  #   Properties: 
  #     AccessLogSetting: 
  #         DestinationArn: 'arn:aws:logs:us-east-1:792514764471:log-group:restapilogs'
  #     DeploymentId: 'Cf created stage 1'
  #     Description: "stage created by cf"
  #     RestApiId: !Ref RESTApiGateway
  #     StageName: webhook2
  #     Tags: 
  #       - Key: name
  #         Value: !Ref TagName
  #     Variables: 
  #       Stack: Webhook

  # LambdaInvokePermission:
  #   Type: AWS::Lambda::Permission
  #   DependsOn: LambdaFunction
  #   Properties:
  #     Action: lambda:InvokeFunction
  #     FunctionName: !Ref LambdaFunction
  #     Principal: apigateway.amazonaws.com
  #     SourceArn: !Sub
  #       - arn:aws:execute-api:us-east-1:${AWS::AccountId}:${RestApiId}/*/*/webhook2
  #       - { RestApiId: !Ref RESTApiGateway }

